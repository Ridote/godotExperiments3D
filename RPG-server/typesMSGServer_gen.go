package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MSAuth) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "success":
			z.Success, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "msg":
			z.Msg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MSAuth) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "success"
	err = en.Append(0x82, 0xa7, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Success)
	if err != nil {
		err = msgp.WrapError(err, "Success")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MSAuth) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "success"
	o = append(o, 0x82, 0xa7, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Success)
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Msg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSAuth) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "success":
			z.Success, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "msg":
			z.Msg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MSAuth) Msgsize() (s int) {
	s = 1 + 8 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.Msg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSDeleteItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSDeleteItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MSItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSDeleteItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MSItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSDeleteItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSDeleteItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSEquipItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSEquipItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MSItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSEquipItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MSItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSEquipItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSEquipItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSG) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Kind, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "payload":
			err = z.Payload.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSG) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "type"
	err = en.Append(0x82, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Kind)
	if err != nil {
		err = msgp.WrapError(err, "Kind")
		return
	}
	// write "payload"
	err = en.Append(0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = z.Payload.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSG) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "type"
	o = append(o, 0x82, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Kind)
	// string "payload"
	o = append(o, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o, err = z.Payload.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSG) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Kind, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kind")
				return
			}
		case "payload":
			bts, err = z.Payload.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSG) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Kind) + 8 + z.Payload.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSInventory) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "items":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0002) {
				z.Items = (z.Items)[:zb0002]
			} else {
				z.Items = make([]DBItem, zb0002)
			}
			for za0001 := range z.Items {
				err = z.Items[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSInventory) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "items"
	err = en.Append(0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Items)))
	if err != nil {
		err = msgp.WrapError(err, "Items")
		return
	}
	for za0001 := range z.Items {
		err = z.Items[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSInventory) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "items"
	o = append(o, 0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Items)))
	for za0001 := range z.Items {
		o, err = z.Items[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSInventory) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "items":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0002) {
				z.Items = (z.Items)[:zb0002]
			} else {
				z.Items = make([]DBItem, zb0002)
			}
			for za0001 := range z.Items {
				bts, err = z.Items[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSInventory) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Items {
		s += z.Items[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "itemID":
			z.ItemID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ItemID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MSItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MSItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "itemID":
			z.ItemID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ItemID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MSItem) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSNewItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSNewItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MSItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSNewItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MSItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSNewItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSNewItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSNewPlayer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "model3D":
			z.Model3D, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Model3D")
				return
			}
		case "owner":
			z.Owner, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSNewPlayer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ID"
	err = en.Append(0x84, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "model3D"
	err = en.Append(0xa7, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Model3D)
	if err != nil {
		err = msgp.WrapError(err, "Model3D")
		return
	}
	// write "owner"
	err = en.Append(0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Owner)
	if err != nil {
		err = msgp.WrapError(err, "Owner")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSNewPlayer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ID"
	o = append(o, 0x84, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "model3D"
	o = append(o, 0xa7, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44)
	o = msgp.AppendInt(o, z.Model3D)
	// string "owner"
	o = append(o, 0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
	o = msgp.AppendBool(o, z.Owner)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSNewPlayer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "model3D":
			z.Model3D, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Model3D")
				return
			}
		case "owner":
			z.Owner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSNewPlayer) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 8 + msgp.IntSize + 6 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSPlayerState) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "HP":
			z.HP, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		case "MP":
			z.MP, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MP")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MSPlayerState) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "HP"
	err = en.Append(0xa2, 0x48, 0x50)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HP)
	if err != nil {
		err = msgp.WrapError(err, "HP")
		return
	}
	// write "MP"
	err = en.Append(0xa2, 0x4d, 0x50)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MP)
	if err != nil {
		err = msgp.WrapError(err, "MP")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MSPlayerState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "HP"
	o = append(o, 0xa2, 0x48, 0x50)
	o = msgp.AppendInt(o, z.HP)
	// string "MP"
	o = append(o, 0xa2, 0x4d, 0x50)
	o = msgp.AppendInt(o, z.MP)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSPlayerState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "HP":
			z.HP, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		case "MP":
			z.MP, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MP")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MSPlayerState) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSPlayerStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "STR":
			z.STR, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "STR")
				return
			}
		case "AGI":
			z.AGI, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "AGI")
				return
			}
		case "INT":
			z.INT, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "INT")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSPlayerStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ID"
	err = en.Append(0x84, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "STR"
	err = en.Append(0xa3, 0x53, 0x54, 0x52)
	if err != nil {
		return
	}
	err = en.WriteInt(z.STR)
	if err != nil {
		err = msgp.WrapError(err, "STR")
		return
	}
	// write "AGI"
	err = en.Append(0xa3, 0x41, 0x47, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.AGI)
	if err != nil {
		err = msgp.WrapError(err, "AGI")
		return
	}
	// write "INT"
	err = en.Append(0xa3, 0x49, 0x4e, 0x54)
	if err != nil {
		return
	}
	err = en.WriteInt(z.INT)
	if err != nil {
		err = msgp.WrapError(err, "INT")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSPlayerStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ID"
	o = append(o, 0x84, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "STR"
	o = append(o, 0xa3, 0x53, 0x54, 0x52)
	o = msgp.AppendInt(o, z.STR)
	// string "AGI"
	o = append(o, 0xa3, 0x41, 0x47, 0x49)
	o = msgp.AppendInt(o, z.AGI)
	// string "INT"
	o = append(o, 0xa3, 0x49, 0x4e, 0x54)
	o = msgp.AppendInt(o, z.INT)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSPlayerStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "STR":
			z.STR, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "STR")
				return
			}
		case "AGI":
			z.AGI, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AGI")
				return
			}
		case "INT":
			z.INT, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "INT")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSPlayerStats) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 4 + msgp.IntSize + 4 + msgp.IntSize + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSPos) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "PX":
			z.PX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PX")
				return
			}
		case "PY":
			z.PY, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PY")
				return
			}
		case "PZ":
			z.PZ, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PZ")
				return
			}
		case "RX":
			z.RX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RX")
				return
			}
		case "RZ":
			z.RZ, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RZ")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSPos) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "PX"
	err = en.Append(0xa2, 0x50, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PX)
	if err != nil {
		err = msgp.WrapError(err, "PX")
		return
	}
	// write "PY"
	err = en.Append(0xa2, 0x50, 0x59)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PY)
	if err != nil {
		err = msgp.WrapError(err, "PY")
		return
	}
	// write "PZ"
	err = en.Append(0xa2, 0x50, 0x5a)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PZ)
	if err != nil {
		err = msgp.WrapError(err, "PZ")
		return
	}
	// write "RX"
	err = en.Append(0xa2, 0x52, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RX)
	if err != nil {
		err = msgp.WrapError(err, "RX")
		return
	}
	// write "RZ"
	err = en.Append(0xa2, 0x52, 0x5a)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RZ)
	if err != nil {
		err = msgp.WrapError(err, "RZ")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSPos) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "PX"
	o = append(o, 0xa2, 0x50, 0x58)
	o = msgp.AppendInt(o, z.PX)
	// string "PY"
	o = append(o, 0xa2, 0x50, 0x59)
	o = msgp.AppendInt(o, z.PY)
	// string "PZ"
	o = append(o, 0xa2, 0x50, 0x5a)
	o = msgp.AppendInt(o, z.PZ)
	// string "RX"
	o = append(o, 0xa2, 0x52, 0x58)
	o = msgp.AppendInt(o, z.RX)
	// string "RZ"
	o = append(o, 0xa2, 0x52, 0x5a)
	o = msgp.AppendInt(o, z.RZ)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSPos) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "PX":
			z.PX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PX")
				return
			}
		case "PY":
			z.PY, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PY")
				return
			}
		case "PZ":
			z.PZ, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PZ")
				return
			}
		case "RX":
			z.RX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RX")
				return
			}
		case "RZ":
			z.RZ, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RZ")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSPos) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSQuestion) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TargetID":
			z.TargetID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "Text":
			z.Text, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "Options":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Options")
				return
			}
			if cap(z.Options) >= int(zb0002) {
				z.Options = (z.Options)[:zb0002]
			} else {
				z.Options = make([]string, zb0002)
			}
			for za0001 := range z.Options {
				z.Options[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Options", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSQuestion) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ID"
	err = en.Append(0x84, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TargetID"
	err = en.Append(0xa8, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TargetID)
	if err != nil {
		err = msgp.WrapError(err, "TargetID")
		return
	}
	// write "Text"
	err = en.Append(0xa4, 0x54, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text)
	if err != nil {
		err = msgp.WrapError(err, "Text")
		return
	}
	// write "Options"
	err = en.Append(0xa7, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Options)))
	if err != nil {
		err = msgp.WrapError(err, "Options")
		return
	}
	for za0001 := range z.Options {
		err = en.WriteString(z.Options[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Options", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSQuestion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ID"
	o = append(o, 0x84, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "TargetID"
	o = append(o, 0xa8, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.TargetID)
	// string "Text"
	o = append(o, 0xa4, 0x54, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.Text)
	// string "Options"
	o = append(o, 0xa7, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Options)))
	for za0001 := range z.Options {
		o = msgp.AppendString(o, z.Options[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSQuestion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TargetID":
			z.TargetID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "Text":
			z.Text, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "Options":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Options")
				return
			}
			if cap(z.Options) >= int(zb0002) {
				z.Options = (z.Options)[:zb0002]
			} else {
				z.Options = make([]string, zb0002)
			}
			for za0001 := range z.Options {
				z.Options[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Options", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSQuestion) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 9 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Text) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Options {
		s += msgp.StringPrefixSize + len(z.Options[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSTalk) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TargetID":
			z.TargetID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "Text":
			z.Text, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MSTalk) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TargetID"
	err = en.Append(0xa8, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TargetID)
	if err != nil {
		err = msgp.WrapError(err, "TargetID")
		return
	}
	// write "Text"
	err = en.Append(0xa4, 0x54, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text)
	if err != nil {
		err = msgp.WrapError(err, "Text")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MSTalk) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "TargetID"
	o = append(o, 0xa8, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.TargetID)
	// string "Text"
	o = append(o, 0xa4, 0x54, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.Text)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSTalk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TargetID":
			z.TargetID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "Text":
			z.Text, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MSTalk) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 9 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Text)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSUnequipItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSUnequipItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MSItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSUnequipItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MSItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSUnequipItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSUnequipItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MSUseItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MSUseItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MSItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MSItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MSItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MSUseItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MSItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MSItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MSUseItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MSItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MSItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MSItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MSItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ID")
						return
					}
				case "itemID":
					z.MSItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MSItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MSUseItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}
