package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MCAnswer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "targetID":
			z.TargetID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "option":
			z.Option, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Option")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCAnswer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "targetID"
	err = en.Append(0xa8, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TargetID)
	if err != nil {
		err = msgp.WrapError(err, "TargetID")
		return
	}
	// write "option"
	err = en.Append(0xa6, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Option)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCAnswer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "targetID"
	o = append(o, 0xa8, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.TargetID)
	// string "option"
	o = append(o, 0xa6, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.Option)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCAnswer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "targetID":
			z.TargetID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		case "option":
			z.Option, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Option")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCAnswer) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 9 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCDeleteItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MCDeleteItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MCItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MCDeleteItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MCItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCDeleteItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MCDeleteItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCEquipItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MCEquipItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MCItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MCEquipItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MCItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCEquipItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MCEquipItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "itemID":
			z.ItemID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ItemID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "itemID":
			z.ItemID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ItemID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCItem) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCLogin) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCLogin) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "username"
	err = en.Append(0x82, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "password"
	err = en.Append(0xa8, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCLogin) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "username"
	o = append(o, 0x82, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "password"
	o = append(o, 0xa8, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCLogin) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCLogin) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Username) + 9 + msgp.StringPrefixSize + len(z.Password)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCNewCharacter) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCNewCharacter) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "name"
	err = en.Append(0x81, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCNewCharacter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "name"
	o = append(o, 0x81, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCNewCharacter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCNewCharacter) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCPos) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "PX":
			z.PX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PX")
				return
			}
		case "PY":
			z.PY, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PY")
				return
			}
		case "PZ":
			z.PZ, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PZ")
				return
			}
		case "RX":
			z.RX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RX")
				return
			}
		case "RY":
			z.RY, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RY")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MCPos) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "PX"
	err = en.Append(0xa2, 0x50, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PX)
	if err != nil {
		err = msgp.WrapError(err, "PX")
		return
	}
	// write "PY"
	err = en.Append(0xa2, 0x50, 0x59)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PY)
	if err != nil {
		err = msgp.WrapError(err, "PY")
		return
	}
	// write "PZ"
	err = en.Append(0xa2, 0x50, 0x5a)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PZ)
	if err != nil {
		err = msgp.WrapError(err, "PZ")
		return
	}
	// write "RX"
	err = en.Append(0xa2, 0x52, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RX)
	if err != nil {
		err = msgp.WrapError(err, "RX")
		return
	}
	// write "RY"
	err = en.Append(0xa2, 0x52, 0x59)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RY)
	if err != nil {
		err = msgp.WrapError(err, "RY")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MCPos) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "PX"
	o = append(o, 0xa2, 0x50, 0x58)
	o = msgp.AppendInt(o, z.PX)
	// string "PY"
	o = append(o, 0xa2, 0x50, 0x59)
	o = msgp.AppendInt(o, z.PY)
	// string "PZ"
	o = append(o, 0xa2, 0x50, 0x5a)
	o = msgp.AppendInt(o, z.PZ)
	// string "RX"
	o = append(o, 0xa2, 0x52, 0x58)
	o = msgp.AppendInt(o, z.RX)
	// string "RY"
	o = append(o, 0xa2, 0x52, 0x59)
	o = msgp.AppendInt(o, z.RY)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCPos) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "PX":
			z.PX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PX")
				return
			}
		case "PY":
			z.PY, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PY")
				return
			}
		case "PZ":
			z.PZ, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PZ")
				return
			}
		case "RX":
			z.RX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RX")
				return
			}
		case "RY":
			z.RY, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RY")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MCPos) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCRegister) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCRegister) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "username"
	err = en.Append(0x83, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "password"
	err = en.Append(0xa8, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	// write "email"
	err = en.Append(0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCRegister) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "username"
	o = append(o, 0x83, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "password"
	o = append(o, 0xa8, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	// string "email"
	o = append(o, 0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCRegister) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCRegister) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Username) + 9 + msgp.StringPrefixSize + len(z.Password) + 6 + msgp.StringPrefixSize + len(z.Email)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCTalk) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "targetID":
			z.TargetID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MCTalk) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "targetID"
	err = en.Append(0xa8, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.TargetID)
	if err != nil {
		err = msgp.WrapError(err, "TargetID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MCTalk) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "targetID"
	o = append(o, 0xa8, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.TargetID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCTalk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "targetID":
			z.TargetID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MCTalk) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCUnequipItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MCUnequipItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MCItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MCUnequipItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MCItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCUnequipItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MCUnequipItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MCUseItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MCUseItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "MCItem"
	// map header, size 2
	// write "ID"
	err = en.Append(0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ID")
		return
	}
	// write "itemID"
	err = en.Append(0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MCItem.ItemID)
	if err != nil {
		err = msgp.WrapError(err, "MCItem", "ItemID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MCUseItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "MCItem"
	// map header, size 2
	// string "ID"
	o = append(o, 0x81, 0xa6, 0x4d, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x82, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ID)
	// string "itemID"
	o = append(o, 0xa6, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MCItem.ItemID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MCUseItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MCItem":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MCItem")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "MCItem")
					return
				}
				switch msgp.UnsafeString(field) {
				case "ID":
					z.MCItem.ID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ID")
						return
					}
				case "itemID":
					z.MCItem.ItemID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem", "ItemID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "MCItem")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MCUseItem) Msgsize() (s int) {
	s = 1 + 7 + 1 + 3 + msgp.IntSize + 7 + msgp.IntSize
	return
}
